import * as React from 'react';
import Document, { Html, Head, Main, NextScript } from 'next/document';
import createEmotionServer from '@emotion/server/create-instance';
import {
  AppType,
  DocumentContext,
  DocumentInitialProps,
  DocumentProps,
} from 'next/dist/shared/lib/utils';
import { EmotionCache } from '@emotion/cache';

import type { EmotionCriticalToChunks } from '@emotion/server/create-instance';

import { emotionCache } from '../shared/emotionCache';
import { theme } from '../shared/themes';

export default class CustomNextDocument extends Document {
  static async getInitialProps(
    ctx: DocumentContext
  ): Promise<DocumentInitialProps | DocumentProps> {
    const origRenderPage = ctx?.renderPage;
    const cache = emotionCache();
    const { extractCriticalToChunks } = createEmotionServer(cache);
    const initialProps = await Document.getInitialProps(ctx);

    /* eslint-disable prettier/prettier */
    try {
      ctx.renderPage = () =>
        origRenderPage({
          enhanceApp:
            // eslint-disable-next-line react/display-name
            (App: AppType | React.ComponentType<{ emotionCache: EmotionCache }>) => (props) =>
              (
                <App
                  emotionCache={cache}
                  {...props}
                />
              ),
        });

      console.info(cache.sheet.tags);

      const emotionStyles = extractCriticalToChunks(initialProps.html);
      const emotionStyleTags = emotionStyles.styles.map((style) => (
        <style
          key={style.key}
          data-emotion={`${style.key} ${style.ids.join(' ')}`}
          dangerouslySetInnerHTML={{ __html: style.css }}
        />
      ));

      console.table(emotionStyles);

      return {
        ...initialProps,
        styles: [...React.Children.toArray(initialProps.styles), ...emotionStyleTags],
      };
    }
    catch (err: unknown) {
      console.error({ error: err || 'caught an error' });
      return {
        ...initialProps,
        // error: err ? err : 'Error rendering custom styles...'
      };
    }
    finally {
      console.info(
        initialProps?.html?.valueOf(),
        initialProps?.head?.valueOf(),
        initialProps?.styles?.valueOf()
      );
    }
    /* eslint-enable prettier/prettier */
  }

  render() {
    return (
      <Html lang="en">
        <Head>
          <meta
            name="theme"
            content={theme.palette?.mode}
          />
          <meta
            name="description"
            content="Generated by create next app"
          />
          <link
            rel="icon"
            href="/favicon.ico"
          />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}
